
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package jcup;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\005\004\000\002\005\003\000\002\010\005\000\002" +
    "\007\007\000\002\007\007\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\006\004\000\002\006\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\004\000" +
    "\002\012\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\014" +
    "\011\000\002\014\007\000\002\013\010\000\002\017\003" +
    "\000\002\017\005\000\002\017\005\000\002\020\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\005\000\002\022\005\000\002\022\003\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\010\000\002\016" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\006\041\006\045\005\001\002\000\006\002" +
    "\ufffd\041\ufffd\001\002\000\004\007\020\001\002\000\012" +
    "\025\015\026\013\027\014\030\016\001\002\000\006\002" +
    "\000\041\006\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufffe\041\ufffe\001\002\000" +
    "\006\002\ufffa\041\ufffa\001\002\000\006\002\ufff9\041\ufff9" +
    "\001\002\000\006\002\ufffb\041\ufffb\001\002\000\006\002" +
    "\ufffc\041\ufffc\001\002\000\006\007\020\046\040\001\002" +
    "\000\004\004\022\001\002\000\006\007\ufff7\046\ufff7\001" +
    "\002\000\006\010\026\054\025\001\002\000\004\010\024" +
    "\001\002\000\006\007\ufff6\046\ufff6\001\002\000\004\004" +
    "\022\001\002\000\004\024\027\001\002\000\004\007\030" +
    "\001\002\000\010\051\031\052\034\053\032\001\002\000" +
    "\006\010\ufff3\054\ufff3\001\002\000\006\010\ufff2\054\ufff2" +
    "\001\002\000\006\010\ufff4\054\ufff4\001\002\000\006\010" +
    "\ufff1\054\ufff1\001\002\000\004\054\036\001\002\000\010" +
    "\051\031\052\034\053\032\001\002\000\006\010\ufff5\054" +
    "\ufff5\001\002\000\004\047\042\001\002\000\006\007\ufff8" +
    "\046\ufff8\001\002\000\012\004\052\033\045\035\050\041" +
    "\053\001\002\000\014\004\052\033\045\035\050\041\053" +
    "\050\147\001\002\000\022\004\uffed\032\uffed\033\uffed\035" +
    "\uffed\037\uffed\040\uffed\041\uffed\050\uffed\001\002\000\016" +
    "\004\071\005\074\025\066\026\063\027\073\042\064\001" +
    "\002\000\022\004\uffef\032\uffef\033\uffef\035\uffef\037\uffef" +
    "\040\uffef\041\uffef\050\uffef\001\002\000\022\004\uffeb\032" +
    "\uffeb\033\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\050\uffeb" +
    "\001\002\000\016\004\071\005\074\025\066\026\063\027" +
    "\073\042\064\001\002\000\022\004\uffee\032\uffee\033\uffee" +
    "\035\uffee\037\uffee\040\uffee\041\uffee\050\uffee\001\002\000" +
    "\004\023\062\001\002\000\014\004\054\025\060\026\055" +
    "\027\057\030\061\001\002\000\022\004\uffea\032\uffea\033" +
    "\uffea\035\uffea\037\uffea\040\uffea\041\uffea\050\uffea\001\002" +
    "\000\022\004\uffe8\032\uffe8\033\uffe8\035\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\050\uffe8\001\002\000\022\004\uffec\032\uffec" +
    "\033\uffec\035\uffec\037\uffec\040\uffec\041\uffec\050\uffec\001" +
    "\002\000\022\004\uffe7\032\uffe7\033\uffe7\035\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\050\uffe7\001\002\000\022\004\uffe9\032" +
    "\uffe9\033\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9\050\uffe9" +
    "\001\002\000\022\004\uffe6\032\uffe6\033\uffe6\035\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\050\uffe6\001\002\000\016\004\071" +
    "\005\074\025\066\026\063\027\073\042\064\001\002\000" +
    "\062\004\uffcf\006\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\043\uffcf\044\uffcf\050\uffcf\054\uffcf\001\002\000" +
    "\004\005\107\001\002\000\062\004\uffd6\006\uffd6\011\uffd6" +
    "\012\uffd6\013\103\014\102\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\050" +
    "\uffd6\054\uffd6\001\002\000\062\004\uffd0\006\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\043\uffd0\044\uffd0\050" +
    "\uffd0\054\uffd0\001\002\000\026\004\uffcb\011\100\012\077" +
    "\032\uffcb\033\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\050" +
    "\uffcb\001\002\000\062\004\uffcd\006\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\050\uffcd\054" +
    "\uffcd\001\002\000\062\004\uffd1\006\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\050\uffd1\054" +
    "\uffd1\001\002\000\062\004\uffd3\006\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3\050\uffd3\054" +
    "\uffd3\001\002\000\062\004\uffce\006\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\043\uffce\044\uffce\050\uffce\054" +
    "\uffce\001\002\000\016\004\071\005\074\025\066\026\063" +
    "\027\073\042\064\001\002\000\010\006\076\011\100\012" +
    "\077\001\002\000\062\004\uffd2\006\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\022\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\043\uffd2\044\uffd2\050\uffd2\054" +
    "\uffd2\001\002\000\016\004\071\005\074\025\066\026\063" +
    "\027\073\042\064\001\002\000\016\004\071\005\074\025" +
    "\066\026\063\027\073\042\064\001\002\000\062\004\uffd8" +
    "\006\uffd8\011\uffd8\012\uffd8\013\103\014\102\015\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\043" +
    "\uffd8\044\uffd8\050\uffd8\054\uffd8\001\002\000\016\004\071" +
    "\005\074\025\066\026\063\027\073\042\064\001\002\000" +
    "\016\004\071\005\074\025\066\026\063\027\073\042\064" +
    "\001\002\000\062\004\uffd4\006\uffd4\011\uffd4\012\uffd4\013" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\050\uffd4\054\uffd4" +
    "\001\002\000\062\004\uffd5\006\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\043\uffd5\044\uffd5\050\uffd5\054\uffd5" +
    "\001\002\000\062\004\uffd7\006\uffd7\011\uffd7\012\uffd7\013" +
    "\103\014\102\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\022\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7\050\uffd7\054\uffd7" +
    "\001\002\000\016\004\071\005\074\025\066\026\063\027" +
    "\073\042\064\001\002\000\010\011\100\012\077\054\111" +
    "\001\002\000\016\004\071\005\074\025\066\026\063\027" +
    "\073\042\064\001\002\000\010\006\113\011\100\012\077" +
    "\001\002\000\062\004\uffcc\006\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\050\uffcc\054\uffcc" +
    "\001\002\000\012\034\uffe2\036\uffe2\043\136\044\137\001" +
    "\002\000\022\011\100\012\077\015\133\016\134\017\132" +
    "\020\126\021\131\022\127\001\002\000\004\036\117\001" +
    "\002\000\012\004\052\033\045\035\050\041\053\001\002" +
    "\000\016\004\052\033\045\035\050\037\122\040\123\041" +
    "\053\001\002\000\022\004\ufff0\032\ufff0\033\ufff0\035\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\050\ufff0\001\002\000\012\004" +
    "\052\033\045\035\050\041\053\001\002\000\022\004\uffe4" +
    "\032\uffe4\033\uffe4\035\uffe4\037\uffe4\040\uffe4\041\uffe4\050" +
    "\uffe4\001\002\000\014\004\052\033\045\035\050\040\125" +
    "\041\053\001\002\000\022\004\uffe5\032\uffe5\033\uffe5\035" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\050\uffe5\001\002\000\016" +
    "\004\uffdb\005\uffdb\025\uffdb\026\uffdb\027\uffdb\042\uffdb\001" +
    "\002\000\016\004\uffd9\005\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\042\uffd9\001\002\000\016\004\071\005\074\025\066\026" +
    "\063\027\073\042\064\001\002\000\016\004\uffda\005\uffda" +
    "\025\uffda\026\uffda\027\uffda\042\uffda\001\002\000\016\004" +
    "\uffdc\005\uffdc\025\uffdc\026\uffdc\027\uffdc\042\uffdc\001\002" +
    "\000\016\004\uffde\005\uffde\025\uffde\026\uffde\027\uffde\042" +
    "\uffde\001\002\000\016\004\uffdd\005\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\042\uffdd\001\002\000\016\011\100\012\077\034" +
    "\uffdf\036\uffdf\043\uffdf\044\uffdf\001\002\000\016\004\071" +
    "\005\074\025\066\026\063\027\073\042\064\001\002\000" +
    "\016\004\071\005\074\025\066\026\063\027\073\042\064" +
    "\001\002\000\006\034\uffe0\036\uffe0\001\002\000\006\034" +
    "\uffe1\036\uffe1\001\002\000\004\034\143\001\002\000\004" +
    "\031\144\001\002\000\012\004\052\033\045\035\050\041" +
    "\053\001\002\000\014\004\052\032\146\033\045\035\050" +
    "\041\053\001\002\000\022\004\uffe3\032\uffe3\033\uffe3\035" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\050\uffe3\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\010\002\007\003\006\004\003\001\001\000" +
    "\002\001\001\000\006\005\016\010\020\001\001\000\002" +
    "\001\001\000\004\004\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\040\001\001\000\004\007\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\042\012\045\013\050" +
    "\014\043\016\046\001\001\000\012\012\120\013\050\014" +
    "\043\016\046\001\001\000\002\001\001\000\016\017\141" +
    "\020\113\022\114\023\064\024\071\025\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\115\020\113" +
    "\022\114\023\064\024\071\025\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\066" +
    "\023\064\024\071\025\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\074\023\064\024\071" +
    "\025\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\105\024\071\025\067\001\001\000\010\023\100" +
    "\024\071\025\067\001\001\000\002\001\001\000\006\024" +
    "\104\025\067\001\001\000\006\024\103\025\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\107\023\064\024\071\025\067\001\001\000\002" +
    "\001\001\000\012\022\111\023\064\024\071\025\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\127\001\001\000\002\001\001\000\014\006" +
    "\117\012\045\013\050\014\043\016\046\001\001\000\012" +
    "\012\120\013\050\014\043\016\046\001\001\000\002\001" +
    "\001\000\014\006\123\012\045\013\050\014\043\016\046" +
    "\001\001\000\002\001\001\000\012\012\120\013\050\014" +
    "\043\016\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\134\023\064\024\071\025" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\020" +
    "\140\022\114\023\064\024\071\025\067\001\001\000\014" +
    "\020\137\022\114\023\064\024\071\025\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\144\012\045\013\050\014\043\016" +
    "\046\001\001\000\012\012\120\013\050\014\043\016\046" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_Error(Symbol s){
        System.out.println("Error en la linea " + (s.right+1) + " columna" + s.left + ". "
            + s + " no reconocido. valor " + s.value );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= prog 
            {
              Object RESULT =null;
		System.out.println("[Regla 0]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= SEC_DEC declaracion SEC_END SEC_PROG programa SEC_ENDPROG 
            {
              Object RESULT =null;
		System.out.println("[Regla 1]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= prog sent_write 
            {
              Object RESULT =null;
		System.out.println("[Regla 2]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prog ::= sent_write 
            {
              Object RESULT =null;
		System.out.println("[Regla 3]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent_write ::= WRITE CTE_STR 
            {
              Object RESULT =null;
		System.out.println("[Regla 4]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_write",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent_write ::= WRITE CTE_ENT 
            {
              Object RESULT =null;
		System.out.println("[Regla 5]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_write",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent_write ::= WRITE CTE_REA 
            {
              Object RESULT =null;
		System.out.println("[Regla 6]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_write",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent_write ::= WRITE CTE_BIN 
            {
              Object RESULT =null;
		System.out.println("[Regla 7]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_write",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracion asignacion_tipos 
            {
              Object RESULT =null;
		System.out.println("[Regla 8]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= asignacion_tipos 
            {
              Object RESULT =null;
		System.out.println("[Regla 9]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asignacion_tipos ::= COR_ABR lista COR_CIE 
            {
              Object RESULT =null;
		System.out.println("[Regla 10]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_tipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista ::= ID COMA lista COMA tipo 
            {
              Object RESULT =null;
		System.out.println("[Regla 11]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista ::= ID COR_CIE ASIG_TIPO COR_ABR tipo 
            {
              Object RESULT =null;
		System.out.println("[Regla 12]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= ASIG_FL 
            {
              Object RESULT =null;
		System.out.println("[Regla 13]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= ASIG_STR 
            {
              Object RESULT =null;
		System.out.println("[Regla 14]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= ASIG_INT 
            {
              Object RESULT =null;
		System.out.println("[Regla 15]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programa ::= programa sentencia 
            {
              Object RESULT =null;
		System.out.println("[Regla 16]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programa ::= sentencia 
            {
              Object RESULT =null;
		System.out.println("[Regla 17]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= iteracion 
            {
              Object RESULT =null;
		System.out.println("[Regla 18]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= condicional 
            {
              Object RESULT =null;
		System.out.println("[Regla 19]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= WRITE salida 
            {
              Object RESULT =null;
		System.out.println("[Regla 20]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("[Regla 21]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // salida ::= ID 
            {
              Object RESULT =null;
		System.out.println("[Regla 22]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // salida ::= CTE_ENT 
            {
              Object RESULT =null;
		System.out.println("[Regla 23]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // salida ::= CTE_REA 
            {
              Object RESULT =null;
		System.out.println("[Regla 24]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // salida ::= CTE_BIN 
            {
              Object RESULT =null;
		System.out.println("[Regla 25]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // salida ::= CTE_STR 
            {
              Object RESULT =null;
		System.out.println("[Regla 26]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicional ::= IF condicion THEN programa ELSE programa ENDIF 
            {
              Object RESULT =null;
		System.out.println("[Regla 27]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicional ::= IF condicion THEN programa ENDIF 
            {
              Object RESULT =null;
		System.out.println("[Regla 28]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // iteracion ::= WHILE condicion DO BEGIN programa END 
            {
              Object RESULT =null;
		System.out.println("[Regla 29]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= comparacion 
            {
              Object RESULT =null;
		System.out.println("[Regla 30]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= comparacion AND comparacion 
            {
              Object RESULT =null;
		System.out.println("[Regla 31]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= comparacion OR comparacion 
            {
              Object RESULT =null;
		System.out.println("[Regla 32]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= expresion comparador expresion 
            {
              Object RESULT =null;
		System.out.println("[Regla 33]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= OP_MAY 
            {
              Object RESULT =null;
		System.out.println("[Regla 34]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= OP_MEN 
            {
              Object RESULT =null;
		System.out.println("[Regla 35]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= OP_DIST 
            {
              Object RESULT =null;
		System.out.println("[Regla 36]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= OP_IGU 
            {
              Object RESULT =null;
		System.out.println("[Regla 37]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= OP_MAYIG 
            {
              Object RESULT =null;
		System.out.println("[Regla 38]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= OP_MENIG 
            {
              Object RESULT =null;
		System.out.println("[Regla 39]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion OP_SUM termino 
            {
              Object RESULT =null;
		System.out.println("[Regla 40]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion OP_RES termino 
            {
              Object RESULT =null;
		System.out.println("[Regla 41]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= termino 
            {
              Object RESULT =null;
		System.out.println("[Regla 42]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= termino OP_MUL factor 
            {
              Object RESULT =null;
		System.out.println("[Regla 43]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		System.out.println("[Regla 43]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termino ::= factor 
            {
              Object RESULT =null;
		System.out.println("[Regla 44]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= PAR_ABR expresion PAR_CIE 
            {
              Object RESULT =null;
		System.out.println("[Regla 45]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= ID 
            {
              Object RESULT =null;
		System.out.println("[Regla 46]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= CTE_ENT 
            {
              Object RESULT =null;
		System.out.println("[Regla 47]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= CTE_REA 
            {
              Object RESULT =null;
		System.out.println("[Regla 48]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= CTE_BIN 
            {
              Object RESULT =null;
		System.out.println("[Regla 49]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= percent 
            {
              Object RESULT =null;
		System.out.println("[Regla 50]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // percent ::= PERCENT PAR_ABR expresion COMA expresion PAR_CIE 
            {
              Object RESULT =null;
		System.out.println("[Regla 51]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("percent",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignacion ::= ID ASIG_VAR expresion 
            {
              Object RESULT =null;
		System.out.println("[Regla 52]”); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
