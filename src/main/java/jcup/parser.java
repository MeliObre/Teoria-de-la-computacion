
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package jcup;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\003\003\000\002\002" +
    "\010\000\002\002\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\004\000\002\005\004\000\002\006\004\000" +
    "\002\006\003\000\002\011\005\000\002\010\007\000\002" +
    "\010\007\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\007\004\000\002\007\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\016\004\000\002\016\004\000\002\015\013\000\002" +
    "\015\011\000\002\014\012\000\002\020\003\000\002\020" +
    "\005\000\002\020\005\000\002\021\005\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\005\000\002" +
    "\023\005\000\002\023\003\000\002\024\005\000\002\024" +
    "\005\000\002\024\003\000\002\030\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\025\005\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\026\010\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\006\045\004\047\006\001\002\000\004\007" +
    "\026\001\002\000\004\002\000\001\002\000\004\041\013" +
    "\001\002\000\004\002\010\001\002\000\004\002\001\001" +
    "\002\000\006\041\ufffc\050\ufffc\001\002\000\006\041\013" +
    "\050\024\001\002\000\014\004\014\025\020\026\015\027" +
    "\016\030\022\001\002\000\056\004\uffd6\006\uffd6\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\032\uffd6\033\uffd6\035\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\043\uffd6\044\uffd6\050\uffd6\054\uffd6\001" +
    "\002\000\056\004\uffd4\006\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\032\uffd4\033\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\043\uffd4\044\uffd4\050\uffd4\054\uffd4\001\002\000\056\004" +
    "\uffd3\006\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\032\uffd3\033" +
    "\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3\044\uffd3" +
    "\050\uffd3\054\uffd3\001\002\000\006\041\ufffa\050\ufffa\001" +
    "\002\000\056\004\uffd5\006\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\032\uffd5\033\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\043\uffd5\044\uffd5\050\uffd5\054\uffd5\001\002\000\006\041" +
    "\ufffb\050\ufffb\001\002\000\056\004\uffd2\006\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\032\uffd2\033\uffd2\035\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\043\uffd2\044\uffd2\050\uffd2\054\uffd2\001" +
    "\002\000\006\041\ufffd\050\ufffd\001\002\000\004\002\ufffe" +
    "\001\002\000\004\046\047\001\002\000\004\004\031\001" +
    "\002\000\006\007\026\046\ufff8\001\002\000\004\046\ufff9" +
    "\001\002\000\006\010\035\054\034\001\002\000\004\010" +
    "\033\001\002\000\006\007\ufff7\046\ufff7\001\002\000\004" +
    "\004\031\001\002\000\004\024\036\001\002\000\004\007" +
    "\037\001\002\000\010\051\041\052\042\053\040\001\002" +
    "\000\006\010\ufff3\054\ufff3\001\002\000\006\010\ufff4\054" +
    "\ufff4\001\002\000\006\010\ufff2\054\ufff2\001\002\000\006" +
    "\010\ufff5\054\ufff5\001\002\000\004\054\045\001\002\000" +
    "\010\051\041\052\042\053\040\001\002\000\006\010\ufff6" +
    "\054\ufff6\001\002\000\004\047\050\001\002\000\012\004" +
    "\061\033\052\035\057\041\062\001\002\000\014\004\061" +
    "\033\052\035\057\041\062\050\154\001\002\000\004\005" +
    "\145\001\002\000\022\004\uffee\032\uffee\033\uffee\035\uffee" +
    "\037\uffee\040\uffee\041\uffee\050\uffee\001\002\000\022\004" +
    "\ufff0\032\ufff0\033\ufff0\035\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\050\ufff0\001\002\000\022\004\uffed\032\uffed\033\uffed\035" +
    "\uffed\037\uffed\040\uffed\041\uffed\050\uffed\001\002\000\022" +
    "\004\uffec\032\uffec\033\uffec\035\uffec\037\uffec\040\uffec\041" +
    "\uffec\050\uffec\001\002\000\004\005\115\001\002\000\022" +
    "\004\uffef\032\uffef\033\uffef\035\uffef\037\uffef\040\uffef\041" +
    "\uffef\050\uffef\001\002\000\004\023\065\001\002\000\014" +
    "\004\014\025\020\026\015\027\016\030\022\001\002\000" +
    "\022\004\uffeb\032\uffeb\033\uffeb\035\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\050\uffeb\001\002\000\022\004\uffea\032\uffea\033" +
    "\uffea\035\uffea\037\uffea\040\uffea\041\uffea\050\uffea\001\002" +
    "\000\020\004\014\005\075\025\020\026\015\027\016\030" +
    "\022\042\066\001\002\000\004\005\110\001\002\000\056" +
    "\004\uffda\006\uffda\011\uffda\012\uffda\013\104\014\103\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\032\uffda" +
    "\033\uffda\035\uffda\037\uffda\040\uffda\041\uffda\043\uffda\044" +
    "\uffda\050\uffda\054\uffda\001\002\000\056\004\uffd0\006\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\032\uffd0\033\uffd0\035\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\043\uffd0\044\uffd0\050\uffd0\054" +
    "\uffd0\001\002\000\026\004\uffcc\011\101\012\100\032\uffcc" +
    "\033\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\050\uffcc\001" +
    "\002\000\056\004\uffce\006\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\032\uffce\033\uffce\035\uffce\037\uffce\040\uffce\041\uffce" +
    "\043\uffce\044\uffce\050\uffce\054\uffce\001\002\000\056\004" +
    "\uffd7\006\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\032\uffd7\033" +
    "\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7" +
    "\050\uffd7\054\uffd7\001\002\000\056\004\uffcf\006\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\022\uffcf\032\uffcf\033\uffcf\035\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\043\uffcf\044\uffcf\050\uffcf\054\uffcf" +
    "\001\002\000\020\004\014\005\075\025\020\026\015\027" +
    "\016\030\022\042\066\001\002\000\010\006\077\011\101" +
    "\012\100\001\002\000\056\004\uffd1\006\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\032\uffd1\033\uffd1\035\uffd1\037\uffd1\040" +
    "\uffd1\041\uffd1\043\uffd1\044\uffd1\050\uffd1\054\uffd1\001\002" +
    "\000\020\004\014\005\075\025\020\026\015\027\016\030" +
    "\022\042\066\001\002\000\020\004\014\005\075\025\020" +
    "\026\015\027\016\030\022\042\066\001\002\000\056\004" +
    "\uffdc\006\uffdc\011\uffdc\012\uffdc\013\104\014\103\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\032\uffdc\033" +
    "\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc" +
    "\050\uffdc\054\uffdc\001\002\000\020\004\014\005\075\025" +
    "\020\026\015\027\016\030\022\042\066\001\002\000\020" +
    "\004\014\005\075\025\020\026\015\027\016\030\022\042" +
    "\066\001\002\000\056\004\uffd8\006\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\032\uffd8\033\uffd8\035\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\043\uffd8\044\uffd8\050\uffd8\054\uffd8\001\002\000" +
    "\056\004\uffd9\006\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\032" +
    "\uffd9\033\uffd9\035\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9" +
    "\044\uffd9\050\uffd9\054\uffd9\001\002\000\056\004\uffdb\006" +
    "\uffdb\011\uffdb\012\uffdb\013\104\014\103\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\032\uffdb\033\uffdb\035" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\050\uffdb" +
    "\054\uffdb\001\002\000\020\004\014\005\075\025\020\026" +
    "\015\027\016\030\022\042\066\001\002\000\010\011\101" +
    "\012\100\054\112\001\002\000\020\004\014\005\075\025" +
    "\020\026\015\027\016\030\022\042\066\001\002\000\010" +
    "\006\114\011\101\012\100\001\002\000\056\004\uffcd\006" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\032\uffcd\033\uffcd\035" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\043\uffcd\044\uffcd\050\uffcd" +
    "\054\uffcd\001\002\000\020\004\014\005\075\025\020\026" +
    "\015\027\016\030\022\042\066\001\002\000\010\006\uffe6" +
    "\043\141\044\142\001\002\000\022\011\101\012\100\015" +
    "\136\016\137\017\135\020\131\021\134\022\132\001\002" +
    "\000\004\006\121\001\002\000\004\036\122\001\002\000" +
    "\012\004\061\033\052\035\057\041\062\001\002\000\016" +
    "\004\061\033\052\035\057\037\125\040\126\041\062\001" +
    "\002\000\022\004\ufff1\032\ufff1\033\ufff1\035\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\050\ufff1\001\002\000\012\004\061\033" +
    "\052\035\057\041\062\001\002\000\022\004\uffe8\032\uffe8" +
    "\033\uffe8\035\uffe8\037\uffe8\040\uffe8\041\uffe8\050\uffe8\001" +
    "\002\000\014\004\061\033\052\035\057\040\130\041\062" +
    "\001\002\000\022\004\uffe9\032\uffe9\033\uffe9\035\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\050\uffe9\001\002\000\020\004\uffdf" +
    "\005\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\042\uffdf\001" +
    "\002\000\020\004\uffdd\005\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\042\uffdd\001\002\000\020\004\014\005\075\025" +
    "\020\026\015\027\016\030\022\042\066\001\002\000\020" +
    "\004\uffde\005\uffde\025\uffde\026\uffde\027\uffde\030\uffde\042" +
    "\uffde\001\002\000\020\004\uffe0\005\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\042\uffe0\001\002\000\020\004\uffe2\005" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\042\uffe2\001\002" +
    "\000\020\004\uffe1\005\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\042\uffe1\001\002\000\014\006\uffe3\011\101\012\100" +
    "\043\uffe3\044\uffe3\001\002\000\020\004\014\005\075\025" +
    "\020\026\015\027\016\030\022\042\066\001\002\000\020" +
    "\004\014\005\075\025\020\026\015\027\016\030\022\042" +
    "\066\001\002\000\004\006\uffe4\001\002\000\004\006\uffe5" +
    "\001\002\000\020\004\014\005\075\025\020\026\015\027" +
    "\016\030\022\042\066\001\002\000\004\006\147\001\002" +
    "\000\004\034\150\001\002\000\004\031\151\001\002\000" +
    "\012\004\061\033\052\035\057\041\062\001\002\000\014" +
    "\004\061\032\153\033\052\035\057\041\062\001\002\000" +
    "\022\004\uffe7\032\uffe7\033\uffe7\035\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\050\uffe7\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\006\002\004\003\006\001\001\000\006\006" +
    "\024\011\026\001\001\000\002\001\001\000\006\004\011" +
    "\005\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\022\001\001\000\006\027\020" +
    "\030\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\031\001\001\000\006" +
    "\006\027\011\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\007\050\013\053\014\057\015\052\016\054\017\055\001" +
    "\001\000\014\013\123\014\057\015\052\016\054\017\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\063\030" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\023\070\024\066\025\072\026\071\027\073\030\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\075\024\066\025\072\026\071" +
    "\027\073\030\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\024\106\025\072\026\071\027\073\030\067" +
    "\001\001\000\014\024\101\025\072\026\071\027\073\030" +
    "\067\001\001\000\002\001\001\000\012\025\105\026\071" +
    "\027\073\030\067\001\001\000\012\025\104\026\071\027" +
    "\073\030\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\110\024\066\025\072\026" +
    "\071\027\073\030\067\001\001\000\002\001\001\000\016" +
    "\023\112\024\066\025\072\026\071\027\073\030\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\020\117" +
    "\021\115\023\116\024\066\025\072\026\071\027\073\030" +
    "\067\001\001\000\002\001\001\000\004\022\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\122\013" +
    "\053\014\057\015\052\016\054\017\055\001\001\000\014" +
    "\013\123\014\057\015\052\016\054\017\055\001\001\000" +
    "\002\001\001\000\016\007\126\013\053\014\057\015\052" +
    "\016\054\017\055\001\001\000\002\001\001\000\014\013" +
    "\123\014\057\015\052\016\054\017\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
    "\137\024\066\025\072\026\071\027\073\030\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\021\143\023\116" +
    "\024\066\025\072\026\071\027\073\030\067\001\001\000" +
    "\020\021\142\023\116\024\066\025\072\026\071\027\073" +
    "\030\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\020\145\021\115\023\116\024\066\025\072\026\071" +
    "\027\073\030\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\151\013\053\014\057" +
    "\015\052\016\054\017\055\001\001\000\014\013\123\014" +
    "\057\015\052\016\054\017\055\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private List<String> listaReglas = new ArrayList<String>();
    private ArrayList<String> listaTabla;
    private static String error;
    private String tipoAct = "";
    private boolean errorTipo = false;
    private ArrayList<String> listaID = new ArrayList<>();
    private ArrayList<String> listaTipo = new ArrayList<>();

    public parser(Scanner s, ArrayList<String> tabla){
        super(s);
        listaTabla = tabla;
    }
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_error(Symbol s){
        if (s.value != null){
            this.error = ("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
               + s + " no reconocido. Valor " + s.value );
        }else if (errorTipo) {
            errorTipo = false;
        }else {
            this.error = ("");
        }
    }


    public void insertarTipoID(){
    int k = 0;
        for (int i = 0;i < listaTabla.size();i = i + 5){
            for (int j = listaID.size() - 1; j >= 0 ;j--){
                if (listaTabla.get(i).equals(listaID.get(j))){
                    listaTabla.remove(i + 2);
                    listaTabla.add(i + 2,listaTipo.get(k));
                    k++;
                }
            }
        }
    }

    public void compararTipo(String id, String t){
        String tipoAsig = "";
        //String tipoActual = sym.terminalNames[s.sym];
        if (t.equals("CTE_ENT") | t.equals("CTE_BIN")){
            tipoAsig = "INT";
        }else if(t.equals("CTE_REA")){
            tipoAsig = "FLOAT";
        }else if(t.equals("CTE_STR")){
            tipoAsig = "STRING";
        }else{
            tipoAsig = t;
        }
        for (int i = 0;i < listaTabla.size();i = i + 5){
            if (listaTabla.get(i).equals(id)){
                if (!listaTabla.get(i + 2).equals(tipoAsig)){
                    errorTipo = true;
                    this.error = ("Error "+ id + " es de tipo " + listaTabla.get(i + 2) + ". El tipo no es compatible con " + tipoAsig + ". ");
                    this.syntax_error(null);
                    //this.report_error("Error El tipo " + tipoAsig + " en la asignacion no es compatible. "+ id + " es de tipo " + listaTabla.get(i + 2) + ". ", null);
                }
            }
        }
        tipoAct = "";
    }

    public String buscarTipo(String id){
        String tipo = "";
        for (int i = 0;i < listaTabla.size();i = i + 5){
                    if (listaTabla.get(i).equals(id)){
                        tipo = (String) listaTabla.get(i + 2);
                    }
        }
        return tipo;
    }

    public List<String> getList() {
            return this.listaReglas;
    }

    public void emptyList() {
            this.listaReglas.clear();
    }

    public static String getError() {
        return (error != null) ? error : "Error desconocido.";
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= prog 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 0] --> Compila correctamente llegando al símbolo start"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= SEC_DEC declaracion SEC_END SEC_PROG programa SEC_ENDPROG 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 1] --> Programa completo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= SEC_PROG prt SEC_ENDPROG 
            {
              Object RESULT =null;
		 listaReglas.add("[Regla 2] --> Programa sin declaraciones"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // prt ::= prt sent_write 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 3] --> Linea de sentencia write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // prt ::= sent_write 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 4] --> Ultima sentencia write"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent_write ::= WRITE cte 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 5] --> Write constante");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_write",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent_write ::= WRITE ident 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 6] --> Write identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent_write",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= asignacion_tipos declaracion 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 7] --> Declaraciones"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= asignacion_tipos 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 8] --> Linea de declaración "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asignacion_tipos ::= COR_ABR lista COR_CIE 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 9] --> [ lista ]"); insertarTipoID(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion_tipos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista ::= ID COMA lista COMA tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 listaReglas.add("[Regla 10] --> id, lista ,tipo   ID = " + id);
                                            RESULT = id;
                                            listaID.add((String)id);
                                            listaTipo.add((String)t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista ::= ID COR_CIE ASIG_TIPO COR_ABR tipo 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 11] --> id] := [tipo    ID = " + id);
                                                RESULT = id;
                                                listaID.add((String)id);
                                                listaTipo.add((String)t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= ASIG_FL 
            {
              Object RESULT =null;
		int tipo_floatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_floatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_float = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 12] --> Float"); RESULT = tipo_float;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= ASIG_STR 
            {
              Object RESULT =null;
		int tipo_stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 13] --> String"); RESULT = tipo_string;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= ASIG_INT 
            {
              Object RESULT =null;
		int tipo_integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tipo_integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tipo_integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 14] --> Integer"); RESULT = tipo_integer; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programa ::= programa sentencia 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 15] --> Bloque de sentencias"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programa ::= sentencia 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 16] --> Sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= iteracion 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 17] --> Iteración"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= condicional 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 18] --> Condicional"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= salida 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 19] --> Salida"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 20] --> Asignación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // salida ::= WRITE ident 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 22] --> Write identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // salida ::= WRITE cte 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 23] --> Write constante"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("salida",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicional ::= IF PAR_ABR condicion PAR_CIE THEN programa ELSE programa ENDIF 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 21] --> IF (condición) THEN programa ELSE programa ENDIF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condicional ::= IF PAR_ABR condicion PAR_CIE THEN programa ENDIF 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 22] --> IF (condición) THEN programa ENDIF"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // iteracion ::= WHILE PAR_ABR condicion PAR_CIE DO BEGIN programa END 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 23] --> WHILE (condición) DO BEGIN programa END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion ::= comparacion 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 24] --> Comparación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion ::= comparacion AND comparacion 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 25] --> Comparación AND Comparación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= comparacion OR comparacion 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 26] --> Comparación OR Comparación"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparacion ::= expresion comparador expresion 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 27] --> Expresión operador expresión"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparador ::= OP_MAY 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 28] --> Operador mayor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparador ::= OP_MEN 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 29] --> Operador menor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparador ::= OP_DIST 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 30] --> Operador distinto"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparador ::= OP_IGU 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 31] --> Operador igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= OP_MAYIG 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 32] --> Operador mayor igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= OP_MENIG 
            {
              Object RESULT =null;
		listaReglas.add("[Regla 33] --> Operador menor igual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= expresion OP_SUM termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 34] --> E+T"); RESULT = e; RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= expresion OP_RES termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 35] --> E-T"); RESULT = e; RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 36] --> T"); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termino ::= termino OP_MUL factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 37] --> T*F"); RESULT = t; RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 38] --> T/F"); RESULT = t; RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 39] --> F valor = " + f); RESULT = f;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ident ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 40] --> Identificador = " + id); RESULT = id;tipoAct = buscarTipo((String) id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cte ::= CTE_ENT 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ent = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 41] --> Constante entera = " + ent); RESULT = ent; tipoAct = "CTE_ENT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cte ::= CTE_REA 
            {
              Object RESULT =null;
		int realeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rearight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rea = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 42] --> Constante real = " + rea); RESULT = rea;tipoAct = "CTE_REA";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cte ::= CTE_BIN 
            {
              Object RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bin = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 43] --> Constante binaria " + bin); RESULT = bin;tipoAct = "CTE_BIN";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cte ::= CTE_STR 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 44] --> Constante string " + str); RESULT = str;tipoAct = "CTE_STR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cte",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= PAR_ABR expresion PAR_CIE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		listaReglas.add("[Regla 45] --> (expresión)"); RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= ident 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 46] --> Identificador"); RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= cte 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 47] --> Constante"); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= percent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 48] --> Funcion PERCENT"); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // percent ::= PERCENT PAR_ABR expresion COMA expresion PAR_CIE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		listaReglas.add("[Regla 49] --> PERCENT(expresión,expresión)"); RESULT = e1; RESULT = e2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("percent",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacion ::= ID ASIG_VAR expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		listaReglas.add("[Regla 50] --> Asignación id ::= expresión [ID = " + id);
                                            RESULT = id;
                                            RESULT = t;
                                            compararTipo((String) id,  tipoAct);
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
