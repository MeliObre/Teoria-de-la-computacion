package jcup;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;

parser code
{:
    /**Metodo al que se llama automaticamente ante algun error sintactico.*/
    public void syntax_Error(Symbol s){
        System.out.println("Error en la linea " + (s.right+1) + " columna" + s.left + ". "
            + s + " no reconocido. valor " + s.value );
    }
:}

action code
{:
:}

/*Declaracion de Terminales */
terminal ID, PAR_ABR,PAR_CIE,COR_ABR,COR_CIE,OP_SUM,OP_RES,OP_DIV,OP_MUL,OP_MAY,OP_MEN,OP_DIST,OP_IGU,OP_MAYIG,OP_MENIG,
ASIG_VAR,ASIG_TIPO,CTE_ENT,CTE_REA,CTE_BIN,CTE_STR,BEGIN,END,WHILE,DO,IF,THEN,ELSE,ENDIF,WRITE,PERCENT,AND,
OR,SEC_DEC,SEC_END,SEC_PROG,SEC_ENDPROG,ASIG_FL,ASIG_INT,ASIG_STR,COMA;

/*Declaracion de No Terminales*/
non terminal prg,inicio, prt, sent_write, declaracion, programa, lista, asignacion_tipos, tipo, sentencia, iteracion,
condicional, salida, asignacion, condicion, comparacion, comparador, expresion, termino, factor, percent, cte, ident;

start with inicio;

inicio ::= prg {:System.out.println("[Regla 0] inicio"); :}
| prt {:System.out.println("[Regla 1]"); :};

prg ::= SEC_DEC:sd declaracion SEC_END SEC_PROG programa SEC_ENDPROG {:System.out.println("[Regla 2] seccion programa"); :};

prt ::= prt sent_write  {:System.out.println("[Regla 3]"); :}
| sent_write  {:System.out.println("[Regla 4]"); :};

sent_write ::= WRITE cte  {:System.out.println("[Regla 5]"); :}
| WRITE ident  {:System.out.println("[Regla 6]"); :};
/*| WRITE CTE_REA  {:System.out.println("[Regla 6]"); :}
| WRITE CTE_BIN  {:System.out.println("[Regla 7]"); :};**/

declaracion ::= asignacion_tipos declaracion   {:System.out.println("[Regla 7] declaracion y asignacion"); :}
| asignacion_tipos {:System.out.println("[Regla 8] declaracion final "); :};


asignacion_tipos ::= COR_ABR:ca lista COR_CIE:cc  {:System.out.println("[Regla 9] abrir lista tipos");  :};

lista ::= ID:id COMA lista COMA tipo  {: System.out.println("[Regla 10] lista 1" + id); RESULT = id;  :}
|  ID:id COR_CIE:cc ASIG_TIPO:at COR_ABR:ca tipo  {:System.out.println("[Regla 11] lista 2" + id); RESULT = id;:};

tipo ::= ASIG_FL:afl   {:System.out.println("[Regla 12] asig float"); RESULT=afl; :}
| ASIG_STR:astr   {:System.out.println("[Regla 13] asig string"); RESULT=astr;:}
|  ASIG_INT:aint  {:System.out.println("[Regla 14] asig entero"); RESULT=aint;:};

programa ::= programa sentencia  {:System.out.println("[Regla 15]"); :}
| sentencia  {:System.out.println("[Regla 16]"); :};

sentencia ::= iteracion  {:System.out.println("[Regla 17]"); :}
| condicional  {:System.out.println("[Regla 18]"); :}
| salida  {:System.out.println("[Regla 19]"); :}
| asignacion  {:System.out.println("[Regla 20]"); :};

salida ::= WRITE ident   {:System.out.println("[Regla 22]"); :}
| WRITE cte   {:System.out.println("[Regla 23]"); :};

condicional ::= IF PAR_ABR condicion PAR_CIE THEN programa ELSE programa ENDIF {:System.out.println("[Regla 21]"); :}
| IF PAR_ABR condicion PAR_CIE THEN programa ENDIF {:System.out.println("[Regla 22]"); :};

iteracion ::= WHILE PAR_ABR condicion PAR_CIE DO BEGIN programa END  {:System.out.println("[Regla 23]"); :};

condicion ::= comparacion  {:System.out.println("[Regla 24]"); :}
| comparacion AND comparacion  {:System.out.println("[Regla 25]"); :}
| comparacion OR comparacion  {:System.out.println("[Regla 26]"); :};

comparacion ::= expresion comparador expresion  {:System.out.println("[Regla 27]"); :};

comparador ::= OP_MAY   {:System.out.println("[Regla 28]"); :}
| OP_MEN  {:System.out.println("[Regla 29]"); :}
| OP_DIST  {:System.out.println("[Regla 30]"); :}
| OP_IGU  {:System.out.println("[Regla 31]"); :}
| OP_MAYIG  {:System.out.println("[Regla 32]"); :}
| OP_MENIG {:System.out.println("[Regla 33]"); :};

expresion ::= expresion OP_SUM termino {:System.out.println("[Regla 34]"); :}
| expresion OP_RES termino  {:System.out.println("[Regla 35]"); :}
| termino {:System.out.println("[Regla 36]"); :};

termino ::= termino OP_MUL factor {:System.out.println("[Regla 37]"); :}
| termino OP_DIV factor {:System.out.println("[Regla 38]"); :}
|  factor {:System.out.println("[Regla 39]"); :};

ident ::= ID {:System.out.println("[Regla 40]"); :};

cte ::= CTE_ENT {:System.out.println("[Regla 41]"); :}
| CTE_REA {:System.out.println("[Regla 42]"); :}
| CTE_BIN {:System.out.println("[Regla 43]"); :}
| CTE_STR {:System.out.println("[Regla 44]"); :};

factor ::= PAR_ABR expresion PAR_CIE {:System.out.println("[Regla 45]"); :}
| ident {:System.out.println("[Regla 46]"); :}
| cte {:System.out.println("[Regla 47]"); :}
| percent {:System.out.println("[Regla 48]"); :};

percent ::= PERCENT PAR_ABR expresion COMA expresion PAR_CIE {:System.out.println("[Regla 49]"); :};

asignacion ::= ID ASIG_VAR expresion {:System.out.println("[Regla 50]"); :};